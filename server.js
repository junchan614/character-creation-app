const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// „Éü„Éâ„É´„Ç¶„Çß„Ç¢Ë®≠ÂÆö
app.use(helmet());
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÁî®„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get('/', (req, res) => {
  res.status(200).json({
    message: '„Ç≠„É£„É©„É°„Ç§„ÇØSNS API Server üé≠',
    status: 'healthy',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    uptime: process.uptime()
  });
});

// RailwayÁî®„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'ok',
    timestamp: new Date().toISOString()
  });
});

// API „Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç
app.get('/api/status', (req, res) => {
  res.json({
    database: process.env.DATABASE_URL ? 'configured' : 'not configured',
    openai: process.env.OPENAI_API_KEY ? 'configured' : 'not configured',
    google_auth: process.env.GOOGLE_CLIENT_ID ? 'configured' : 'not configured',
    jwt: process.env.JWT_SECRET ? 'configured' : 'not configured'
  });
});

// PostgreSQLÊé•Á∂ö„ÉÜ„Çπ„ÉàÁî®„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.get('/api/db-test', async (req, res) => {
  try {
    if (!process.env.DATABASE_URL) {
      return res.status(500).json({
        error: 'DATABASE_URL not configured',
        message: 'PostgreSQLÊé•Á∂öÊÉÖÂ†±„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'
      });
    }

    // PostgreSQLÊé•Á∂ö„ÉÜ„Çπ„ÉàÔºàÂãïÁöÑimportÔºâ
    const { Pool } = require('pg');
    const pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });

    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as current_time, version()');
    client.release();
    await pool.end();

    res.json({
      status: 'success',
      message: 'PostgreSQLÊé•Á∂öÊàêÂäüÔºÅ',
      current_time: result.rows[0].current_time,
      database_version: result.rows[0].version.split(' ')[0] + ' ' + result.rows[0].version.split(' ')[1]
    });

  } catch (error) {
    console.error('Database connection error:', error);
    res.status(500).json({
      status: 'error',
      message: 'PostgreSQLÊé•Á∂ö„Ç®„É©„Éº',
      error: error.message
    });
  }
});

// 404„Éè„É≥„Éâ„É©„Éº
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Not Found',
    message: `„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà ${req.originalUrl} „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`
  });
});

// „Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
app.use((err, req, res, next) => {
  console.error('Server Error:', err);
  res.status(500).json({
    error: 'Internal Server Error',
    message: '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// „Éó„É≠„Çª„ÇπÁµÇ‰∫Ü„Ç∑„Ç∞„Éä„É´„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('SIGTERM', () => {
  console.log('üõë SIGTERM received, graceful shutdown starting');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë SIGINT received, graceful shutdown starting');
  process.exit(0);
});

// keep-aliveÁî®„ÅÆÂÆöÊúüpingÔºà„Çà„ÇäÈ†ªÁπÅ„Å´Ôºâ
setInterval(() => {
  console.log(`üíì Keep alive - ${new Date().toISOString()}`);
  // Ëá™ÂàÜËá™Ë∫´„Å´ping„ÇíÈÄÅ„Å£„Å¶„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁä∂ÊÖã„ÇíÁ∂≠ÊåÅ
  if (process.env.NODE_ENV === 'production') {
    console.log('üîÑ Self-ping to maintain activity');
  }
}, 15000); // 15Áßí„Åî„Å®

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ „Ç≠„É£„É©„É°„Ç§„ÇØSNS Server running on port ${PORT}`);
  console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üóÑÔ∏è Database: ${process.env.DATABASE_URL ? 'configured' : 'not configured'}`);
  console.log(`ü§ñ OpenAI: ${process.env.OPENAI_API_KEY ? 'configured' : 'not configured'}`);
  console.log(`üåê Server listening on 0.0.0.0:${PORT}`);
});

// „Çµ„Éº„Éê„Éº„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
server.on('error', (error) => {
  console.error('‚ùå Server Error:', error);
});

module.exports = app;